<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树莓派64位系统安装WiringPi</title>
      <link href="/2025/05/06/091156/"/>
      <url>/2025/05/06/091156/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="first_down"><p>WiringPi作者说明这个官网已经关闭，再也不能下载任何东西了 (除非有他的邮箱)。 早在2019年作者就发表一篇公开信，阐述了开源精神的困难坚持和放弃。本次总结一下树莓派64位系统安装WiringPi的方法。</p></div><h2 id="c使用gpio"><a class="markdownIt-Anchor" href="#c使用gpio"></a> C使用GPIO</h2><h3 id="-1-安装-wiringpi"><a class="markdownIt-Anchor" href="#-1-安装-wiringpi"></a> -1. 安装 WiringPi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install wiringpi</span><br></pre></td></tr></table></figure><p><strong>尝试无效</strong></p><h3 id="0-安装-wiringpi-源码"><a class="markdownIt-Anchor" href="#0-安装-wiringpi-源码"></a> 0. 安装 WiringPi 源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/WiringPi/WiringPi.git</span><br><span class="line"><span class="built_in">cd</span> wiringPi</span><br></pre></td></tr></table></figure><h3 id="1-编译-wiringpi"><a class="markdownIt-Anchor" href="#1-编译-wiringpi"></a> 1. 编译 WiringPi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./build debian</span><br><span class="line"><span class="built_in">mv</span> debian-template/wiringpi_3.14_arm64.deb ./wiringpi_3.14_arm64.deb</span><br></pre></td></tr></table></figure><h3 id="2-安装-wiringpi-包"><a class="markdownIt-Anchor" href="#2-安装-wiringpi-包"></a> 2. 安装 WiringPi 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i wiringpi_3.14_arm64.deb</span><br></pre></td></tr></table></figure><h3 id="3-验证-wiringpi-安装"><a class="markdownIt-Anchor" href="#3-验证-wiringpi-安装"></a> 3. 验证 WiringPi 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpio -v</span><br><span class="line">gpio readall</span><br></pre></td></tr></table></figure><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/05/001.png" alt="WiringPi" /></p><h2 id="python-使用gpio"><a class="markdownIt-Anchor" href="#python-使用gpio"></a> python 使用GPIO</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-rpi.gpio</span><br></pre></td></tr></table></figure><h3 id="0-导入-gpio-库"><a class="markdownIt-Anchor" href="#0-导入-gpio-库"></a> 0. 导入 GPIO 库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br></pre></td></tr></table></figure><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/05/002.png" alt="导入GPIO库" /></p><!-- ## _还没写完.._ --><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>老王（）</title>
      <link href="/2025/05/04/103937/"/>
      <url>/2025/05/04/103937/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="first_down"><p><!-- line left -->五一劳动节，在家劳动的时候，想起曾经的些许事情，就这样，我想起了我中学时代的数学老师，老王（）。</p></div><p>十年前七月份的夏末，中考完，在书城里翻看高一的数学，看着那些奇奇怪怪的符号属实有些懵。高中数学是一种抽象的转变，看起来非常不适应，算了，等开学了老师教吧，总比我这闷头硬看强得多。</p><p>九月开学季，一位六旬老人走上讲台，原本少许嘈杂的教室立刻安静了下来，他在黑板上用工整的楷书写下了他的姓名，和其他的老师一样，简单的自我介绍就开始了第一堂课。</p><p>我对数学是有些喜爱的，下课便会去找老师讨论一二，有时候也会跑到办公室去，三五次后便熟悉了。</p><p>老师的办公室好像是最大的，比较宽敞，中间有个大窗户，室内非常亮堂，窗户的两侧便是办公桌，一台电脑，一摞作业，一个笔筒，一个水壶。座位前面摆放着没批改完的试卷和一支开盖的红笔，水壶里总是泡满了茶叶，茶水颜色深沉。</p><p>某个周二下午，我偶然间碰见了他，他一身白衣，在足球场中央打太极，我便跟了上去，也打了起来，后来我也跟着打了几次。后来才知道这就是24式太极拳，大一必修课。<br />“这太极要做多久才会见效”<br />“三十年”<br />点了点头，我可能也坚持不了那么久吧…</p><p>不久后分班了，我在理科班，老师不再教我数学了。我抱作业去办公室路过他的门口，看到他在和一个语文老师讨论诗词，好像是李清照？我有些惊讶.</p><p>后来才知道，他教龄30有余（2018），是我化学老师的中学老师。</p><p>他的眼中是慈祥的，按照年纪，我确应该称他为爷爷了。</p><p>如今退休了，回到了家乡，但更像是隐居了起来，我在朋友圈里还时不时看到他作的词，早些时候会署名鄱湖野老。</p><p>油尽灯枯之年，作词悲矣。</p><p>虞美人·晨起<br />鄱湖野老<br />春光易逝人易老，<br />白发添多少？<br />晓来忍看镜前翁，<br />岁月犁痕满布黄土垄。</p><p>河边柳树年年绿，<br />独有人憔悴。<br />半壶浊酒置中流，<br />一任长风吹送天尽头。</p><p>如果有机会，我想我要去拜访一下这位老者，他好似我中学时代的一盏灯，如今我已经远去，回首望去，那盏灯依旧伫立，星星点点。</p><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JTAG应用简述</title>
      <link href="/2025/03/04/183838/"/>
      <url>/2025/03/04/183838/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="外围电路应用"><a class="markdownIt-Anchor" href="#外围电路应用"></a> 外围电路应用</h2><ul><li><p>1.1 TMS</p><ul><li>TMS是启动使能信号（标准PAGE-11），上拉。</li></ul></li><li><p>1.2 TCK</p><ul><li>TCK是时钟信号（标准PAGE-9），上升沿或下降沿有效，可以上拉也可下拉，根据具体的器件要求选择。</li></ul></li><li><p>1.3 TDI</p><ul><li>TDI是数据输入（标准PAGE-11），上拉。</li></ul></li><li><p>1.4 TDO</p><ul><li>TDO是数据输出（标准PAGE-12），三态输出，可以和TDI做级联，上拉或浮空。</li></ul></li><li><p>1.5 TRST</p><ul><li>TRST 是复位信号（标准PAGE-13），低电平为复位状态，上拉。</li></ul></li></ul><h2 id="接口信号"><a class="markdownIt-Anchor" href="#接口信号"></a> 接口信号</h2><p>JTAG接口使用以下五个专用信号，每个支持该标准的芯片都必须提供这些信号：</p><ol><li><strong>TRST（测试复位）</strong>：这是一个测试复位输入信号，用于初始化并禁用测试接口。</li><li><strong>TCK（测试时钟）</strong>：这是测试时钟输入信号，它独立于任何系统时钟来控制测试接口的时序。TCK由控制测试的设备提供脉冲信号，而不是由被测试设备提供。它可以以任何频率（最高可达几兆赫兹）产生脉冲，甚至可以以不同的速率产生脉冲。</li><li><strong>TMS（测试模式选择）</strong>：这是测试模式选择输入信号，用于控制测试接口状态机的状态转换。</li><li><strong>TDI（测试数据输入）</strong>：这是测试数据输入线，用于向JTAG寄存器（边界扫描寄存器、指令寄存器或其他数据寄存器）提供数据。</li><li><strong>TDO（测试数据输出）</strong>：这是测试数据输出线，用于将JTAG寄存器中的数据以串行方式输出到控制测试的设备。它携带从边界扫描链（或其他JTAG寄存器）采样的值，并将这些值传输到串行测试电路中的下一个芯片。</li></ol><p>在一块包含多个支持JTAG芯片的电路板上，测试电路的常见连接方式是将TRST*、TCK和TMS信号并行连接到每个芯片上，并将一个芯片的TDO连接到下一个芯片的TDI，形成一个单环结构。这样，电路板就呈现出一个具有上述五个相同信号的单一测试接口。对于只有少数几个带有JTAG接口芯片的电路板，一种更简单的布置方式是为每个这样的芯片提供一个JTAG测试端口，并独立控制测试。</p><h2 id="jtag功能边界扫描"><a class="markdownIt-Anchor" href="#jtag功能边界扫描"></a> JTAG功能——边界扫描</h2><p><img src="%E6%8E%A5%E5%8F%A3%E7%A4%BA%E6%84%8F%E5%9B%BE" alt="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/03/jtag-arch-large.png" /></p><p>JTAG总线可以连接多个设备，每个设备都有JTAG总线接口，每个设备都有自己的ID码和寄存器。可以通过总线相连，一次扫描多个设备。</p><p>再来看每个芯片，内部扫描器连接所有的GPIO寄存器，可以控制GPIO电平状态，写入数据，读取数据。</p><p>利用这个特性，我们可以主动拉高某个GPIO，然后读取其他GPIO的电平状态，如果其他GPIO电平发生了变化，则可以判断出GPIO是否连锡。通过一定的算法，可以实现对所有芯片的所有GPIO进行扫描，判断一批板子的连接情况。</p><blockquote><p>其实网上那些廉价盗版的JTAG调试器基本都没有这个功能，而且这种调试器硬件成本比其售价要低不少，自己动动手也能做一个功能非常简单的调试器。</p></blockquote><hr /><blockquote><p>想要深入了解内部工作原理的话，可以参考以下文章：<a target="_blank" rel="noopener" href="https://web.archive.org/web/20110713022446/http://www.inaccessnetworks.com/ian/projects/ianjtag/jtag-intro/jtag-intro.html">A Brief Introduction to the JTAG Boundary Scan Interface —— Nick Patavalis</a></p></blockquote><h2 id="jtag协议的状态机tap控制器"><a class="markdownIt-Anchor" href="#jtag协议的状态机tap控制器"></a> JTAG协议的状态机（TAP控制器）</h2><p>JTAG协议工作的基本逻辑全依赖内部的TAP控制器（Test Access Port），其实就是一个状态机，通过TMS信号来切换不同的状态。</p><p><img src="%E6%8E%A5%E5%8F%A3%E7%A4%BA%E6%84%8F%E5%9B%BE" alt="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/03/002.png" /></p><h3 id="test-logic-reset-测试逻辑复位状态"><a class="markdownIt-Anchor" href="#test-logic-reset-测试逻辑复位状态"></a> Test-Logic-Reset 测试逻辑复位状态</h3><ul><li>处于这种状态下，测试逻辑被禁止以允许芯片正常操作，读 IDCODE 寄存器将禁止测试逻辑。</li><li>无论 TAP 控制器处于何种状态，只要将 TMS 信号在 5 个连续的 TCK 信号的上升沿保持高电平，TAP 就将进入 Test-Logic-Reset 状态。如果 TMS 信号一直为高电平，那么 TAP 将保持在 Test-Logic-Reset 状态。另外，TRST 信号也可以强迫 TAP 进入 Test-Logic-Reset 状态。</li><li>处于 Test-Logic-Reset 状态的 TAP，如果下一个 TCK 的上升沿时 TMS 信号处于低电平，那么 TAP 将被切换到 Run-Test-Idle 状态。</li></ul><h3 id="run-test-idle-运行测试空闲状态"><a class="markdownIt-Anchor" href="#run-test-idle-运行测试空闲状态"></a> Run-Test-Idle 运行测试空闲状态</h3><ul><li>Run-Test-Idle 是 TAP 控制器扫描操作空闲状态。如果 TMS 信号一直处于低电平，那么 TAP 将保持在 Run-Test-Idle 状态。</li><li>当 TMS 信号在 TCK 上升沿处于高电平，TAP 控制器将进入 Select-DR-Scan 状态。</li></ul><h3 id="select-dr-scan-选择数据寄存器扫描状态"><a class="markdownIt-Anchor" href="#select-dr-scan-选择数据寄存器扫描状态"></a> Select-DR-Scan 选择数据寄存器扫描状态</h3><ul><li>Select-DR-Scan 是 TAP 控制器的一个临时状态，边界扫描寄存器 BSR 保持它们先前的状态。</li><li>当 TMS 信号在下一个 TCK 上升沿处于低电平，TAP 控制器进入 Capture-DR 状态，一个边界扫描寄存器的扫描操作同时被初始化。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 控制器将进入 Select-IR-Scan 状态。</li></ul><h3 id="capture-dr-捕获数据寄存器状态"><a class="markdownIt-Anchor" href="#capture-dr-捕获数据寄存器状态"></a> Capture-DR 捕获数据寄存器状态</h3><ul><li>如果 TAP 控制器处于 Capture-DR 状态，且当前指令是 SAMPLE/PRELOAD 指令，那么边界扫描寄存器 BSR 在 TCK 信号的上升沿捕获输入管脚的数据。如果此时不是 SAMPLE/PRELOAD 指令，那么 BSR 保持它们先前的值。另外，BSR 的值被放入连接在 TDI 和 TDO 管脚之间的移位寄存器中。</li><li>处于 Capture-DR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Exit1-DR 状态。如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 进入 Shift-DR 状态。</li></ul><h3 id="shift-dr-移位数据寄存器状态"><a class="markdownIt-Anchor" href="#shift-dr-移位数据寄存器状态"></a> Shift-DR 移位数据寄存器状态</h3><ul><li>在 Shift-DR 状态下，在每个 TCK 的上升沿，TDI - 移位寄存器 - TDO 串行通道向右移一位，TDI 的数据移入移位寄存器，移位寄存器最靠近 TDO 的位移到 TDO 管脚上。</li><li>处于 Shift-DR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Exit1-DR 状态。如果 TMS 信号处于低电平，则 TAP 一直进行移位操作。</li></ul><h3 id="exit1-dr-退出数据寄存器状态-1"><a class="markdownIt-Anchor" href="#exit1-dr-退出数据寄存器状态-1"></a> Exit1-DR 退出数据寄存器状态 1</h3><ul><li>Exit1-DR 是 TAP 控制器的一个临时状态。如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Update-DR 状态；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 进入 Pause-DR 状态。</li><li>处于 Exit1-DR 状态时，指令不会被改变。</li></ul><h3 id="pause-dr-暂停数据寄存器状态"><a class="markdownIt-Anchor" href="#pause-dr-暂停数据寄存器状态"></a> Pause-DR 暂停数据寄存器状态</h3><ul><li>Pause-DR 状态允许 TAP 控制器暂时停止 TDI - 移位寄存器 - TDO 串行通道的移位操作。</li><li>处于 Pause-DR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Exit2-DR 状态；如果 TMS 信号处于低电平，则 TAP 一直保持暂停状态。</li></ul><h3 id="exit2-dr-退出数据寄存器状态-2"><a class="markdownIt-Anchor" href="#exit2-dr-退出数据寄存器状态-2"></a> Exit2-DR 退出数据寄存器状态 2</h3><ul><li>Exit2-DR 也是 TAP 控制器的临时状态。如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Update-DR 状态，结束扫描操作；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 重新进入 Shift-DR 状态。</li><li>处于 Exit2-DR 状态时，指令不会被改变。</li></ul><h3 id="update-dr-更新数据寄存器状态"><a class="markdownIt-Anchor" href="#update-dr-更新数据寄存器状态"></a> Update-DR 更新数据寄存器状态</h3><ul><li>在正常情况下，边界扫描寄存器 BSR 的值是被锁存在并行输出管脚中，以免在 EXTEST 或 SAMPLE/PRELOAD 命令下执行移位操作时改变 BSR 的值。当处于 Update-DR 状态时选择的是 BSR 寄存器，那么移位寄存器中的值将在 TCK 的下降沿被锁存到 BSR 寄存器的并行输出管脚中去。</li><li>处于 Update-DR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Select-DR-Scan 状态；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 进入 Run-Test-Idle 状态。</li></ul><h3 id="select-ir-scan-选择指令寄存器扫描状态"><a class="markdownIt-Anchor" href="#select-ir-scan-选择指令寄存器扫描状态"></a> Select-IR-Scan 选择指令寄存器扫描状态</h3><ul><li>Select-IR-Scan 是 TAP 控制器的一个临时状态。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于低电平，TAP 控制器进入 Capture-IR 状态，一个对指令寄存器的扫描操作同时被初始化。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 控制器将进入 Test-Logic-Reset 状态。</li><li>处于 Select-IR-Scan 状态时，指令不会被改变。</li></ul><h3 id="capture-ir-捕获指令寄存器状态"><a class="markdownIt-Anchor" href="#capture-ir-捕获指令寄存器状态"></a> Capture-IR 捕获指令寄存器状态</h3><ul><li>处于 Capture-IR 状态时，指令寄存器中的值被固定设置成 0b0000001，并将它放入连接在 TDI 与 TDO 之间的移位寄存器中。</li><li>处于 Capture-IR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Exit1-IR 状态；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 进入 Shift-IR 状态。</li></ul><h3 id="shift-ir-移位指令寄存器状态"><a class="markdownIt-Anchor" href="#shift-ir-移位指令寄存器状态"></a> Shift-IR 移位指令寄存器状态</h3><ul><li>在 Shift-IR 状态下，在每个 TCK 的上升沿，TDI - 移位寄存器 - TDO 串行通道向右移一位，JTAG 指令从 TDI 管脚上被逐位移入移位寄存器，而移位寄存器中的 0b0000001 则被逐位从 TDO 管脚移出。</li><li>处于 Shift-IR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Exit1-IR 状态；如果 TMS 信号处于低电平，则 TAP 一直进行移位操作。</li></ul><h3 id="exit1-ir-退出指令寄存器状态-1"><a class="markdownIt-Anchor" href="#exit1-ir-退出指令寄存器状态-1"></a> Exit1-IR 退出指令寄存器状态 1</h3><ul><li>Exit1-IR 是 TAP 控制器的一个临时状态。如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Update-IR 状态；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 进入 Pause-IR 状态。</li><li>处于 Exit1-IR 状态时，指令不会被改变。</li></ul><h3 id="pause-ir-暂停指令寄存器状态"><a class="markdownIt-Anchor" href="#pause-ir-暂停指令寄存器状态"></a> Pause-IR 暂停指令寄存器状态</h3><ul><li>Pause-IR 状态允许 TAP 控制器暂时停止 TDI - 移位寄存器 - TDO 串行通道的移位操作。</li><li>处于 Pause-IR 状态时，指令不会被改变。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Exit2-IR 状态；如果 TMS 信号处于低电平，则 TAP 一直处于暂停状态。</li></ul><h3 id="exit2-ir-退出指令寄存器状态-2"><a class="markdownIt-Anchor" href="#exit2-ir-退出指令寄存器状态-2"></a> Exit2-IR 退出指令寄存器状态 2</h3><ul><li>Exit2-IR 也是 TAP 控制器的临时状态。如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Update-IR 状态，结束扫描操作；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 重新进入 Shift-IR 状态。</li><li>处于 Exit2-IR 状态时，指令不会被改变。</li></ul><h3 id="update-ir-更新指令寄存器状态"><a class="markdownIt-Anchor" href="#update-ir-更新指令寄存器状态"></a> Update-IR 更新指令寄存器状态</h3><ul><li>处于 Update-IR 状态时，移位寄存器中的值将在 TCK 的下降沿被锁存到指令寄存器中，一旦锁存成功，新的指令将成为当前的指令。</li><li>如果 TMS 信号在下一个 TCK 上升沿处于高电平，TAP 进入 Select-DR-Scan 状态；如果 TMS 信号在下一个 TCK 上升沿处于低电平，则 TAP 进入 Run-Test-Idle 状态。</li></ul><h3 id="jtag-接口指令集"><a class="markdownIt-Anchor" href="#jtag-接口指令集"></a> JTAG 接口指令集</h3><p>JTAG 接口指令集包含以下常用指令：</p><h4 id="extest-指令"><a class="markdownIt-Anchor" href="#extest-指令"></a> EXTEST 指令</h4><ul><li>外部测试指令，必须全为 0，TAP 强制定义。该指令初始化外部电路测试，主要用于板级互连以及片外电路测试。</li><li>EXTEST 指令在 Shift-DR 状态时将扫描寄存器 BSR 寄存器连接到 TDI 与 TDO 之间。在 Capture-DR 状态时，EXTEST 指令将输入管脚的状态在 TCK 的上升沿装入 BSR 中。EXTEST 指令从不使用移入 BSR 中的输入锁存器中的数据，而是直接从管脚上捕获数据。在 Update-DR 状态时，EXTEST 指令将锁存在并行输出寄存器单元中的数据在 TCK 的下降沿驱动到对应的输出管脚上去。</li></ul><h4 id="samplepreload-指令"><a class="markdownIt-Anchor" href="#samplepreload-指令"></a> SAMPLE/PRELOAD 指令</h4><ul><li>采样/预装载指令，TAP 强制定义。在 Capture-DR 状态下，SAMPLE/PRELOAD 指令提供一个从管脚到片上系统逻辑的数据流快照，快照在 TCK 的上升沿提取。</li><li>在 Update-DR 状态时，SAMPLE/PRELOAD 指令将 BSR 寄存器单元中的数据锁存到并行输出寄存器单元中，然后由 EXTEST 指令将锁存在并行输出寄存器单元中的数据在 TCK 的下降沿驱动到对应的输出管脚上去。</li></ul><h4 id="bypass-指令"><a class="markdownIt-Anchor" href="#bypass-指令"></a> BYPASS 指令</h4><ul><li>旁路指令，必须全为 1，TAP 强制定义。BYPASS 指令通过在 TDI 和 TDO 之间放置一个 1 位的旁通寄存器，这样移位操作时只经过 1 位的旁通寄存器而不是很多位（与管脚数量相当）的边界扫描寄存器 BSR，从而使得对连接在同一 JTAG 链上主 CPU 之外的其他芯片进行测试时提高效率。</li></ul><h4 id="idcode-指令"><a class="markdownIt-Anchor" href="#idcode-指令"></a> IDCODE 指令</h4><ul><li>读取 CPU ID 号指令，TAP 强制定义。该指令将处理器的 ID 号寄存器连接到 TDI 和 TDO 之间。</li></ul><!-- ## _还没写完.._ --><blockquote><p>参考链接：</p><ol><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/whik1194/article/details/125984568">强大的JTAG边界扫描（1）：基本原理介绍「CSDN」</a></li><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/qq_42605300/article/details/121216605">JTAG接口电路上下拉 应用「CSDN」</a></li><li><a target="_blank" rel="noopener" href="https://web.archive.org/web/20110713022446/http://www.inaccessnetworks.com/ian/projects/ianjtag/jtag-intro/jtag-intro.html">A Brief Introduction to the JTAG Boundary Scan Interface —— Nick Patavalis</a></li></ol></blockquote><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决ubuntu24频繁死机</title>
      <link href="/2025/02/28/104139/"/>
      <url>/2025/02/28/104139/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ubuntu频繁死机，只要同时开启qq和edge就会卡死，手动清除内存占用无果。但发现了端倪，交换空间太小了只有2GB。于是开始尝试扩容，扩容后解决问题。</p><p>可能由于当前版本是从ubuntu18.04升级上来的，swap空间没有扩大。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭所有交换空间，-a 选项表示关闭所有已启用的交换空间</span></span><br><span class="line">sudo swapoff -a</span><br><span class="line"><span class="comment"># 显示当前系统中已启用的交换空间信息</span></span><br><span class="line">sudo swapon --show</span><br><span class="line"><span class="comment"># 删除当前的交换文件 /swapfile</span></span><br><span class="line">sudo <span class="built_in">rm</span> /swapfile</span><br><span class="line"><span class="comment"># 创建一个新的 16GB 大小的交换文件 /swapfile</span></span><br><span class="line">sudo fallocate -l 16G /swapfile</span><br><span class="line"><span class="comment"># 设置交换文件的权限为 600，即只有文件所有者有读写权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="comment"># 将指定的文件 /swapfile 格式化为交换空间</span></span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line"><span class="comment"># 启用指定的交换文件 /swapfile</span></span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="comment"># 再次显示当前系统中已启用的交换空间信息</span></span><br><span class="line">sudo swapon --show</span><br><span class="line"><span class="comment"># 以人类可读的格式显示系统的内存使用情况，包括物理内存和交换空间</span></span><br><span class="line">free -h</span><br></pre></td></tr></table></figure><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/02/005.png" alt="资源监控器 " /></p><!-- ## _还没写完.._ --><blockquote><p>参考链接：</p><ol><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/sunyuhua_keyboardhttps://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/details/142485764">「CSDN」ubuntu24.04 怎么调整swap分区的大小，调整为16G</a></li></ol></blockquote><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>外围电路设计--晶振电路</title>
      <link href="/2025/02/22/164406/"/>
      <url>/2025/02/22/164406/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="是什么"><a class="markdownIt-Anchor" href="#是什么"></a> 是什么</h2><blockquote><p>什么叫做晶振</p></blockquote><p>晶振是石英晶体谐振器（quartz crystal oscillator）的简称。晶振原理是通过压电效应产生波形。</p><h2 id="在芯片中"><a class="markdownIt-Anchor" href="#在芯片中"></a> 在芯片中</h2><blockquote><p>芯片如何接受外部时钟信号？</p></blockquote><p>这是一个<code>皮尔斯振荡器</code>，芯片内部由他接收信号，将接收到的晶振信号转换成芯片内部能够识别的方波。</p><p><img src="%E6%99%B6%E4%BD%93%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%99%A8%E4%BB%B6%E5%8F%82%E6%95%B0" alt="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/02/004.png" /></p><p>其中电阻以上是芯片内部电路，电阻以下（包括电阻）是晶振外部电路，也就是单片机最小系统的晶振电路部分。</p><p>它实际量出来的波形是频率固定的正弦波。</p><h2 id="计算"><a class="markdownIt-Anchor" href="#计算"></a> 计算</h2><p>负载电容计算公式如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>L</mi><mo>=</mo><mi>C</mi><mn>1</mn><mo>∗</mo><mi>C</mi><mn>2</mn><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>C</mi><mn>1</mn><mo>+</mo><mi>C</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">CL = C1*C2 / (C1+C2) + CS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">2</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span></span></p><p>CS为电路板的寄生电容，一般取 3~5pF，取C1 = C2，那么公式可以简化成如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>L</mi><mo>=</mo><mi>C</mi><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mi>C</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">CL = C1 / 2 + CS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span></span></p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>对于我们做方案来说，一般直接获取芯片厂商给的参考图按照要求。芯片厂商已经多次测试投入量产使用，所以一般直接拿图就可以了。</p><!-- ## _还没写完.._ --><div id="first_down"><p>水一篇文章，晶振其实也不多，实际应用一般拿来即用，除非你是做芯片设计的或者是其他方面需要详细计算参数，一般直接用即可。</p></div><blockquote><p>参考链接：</p><ol><li><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/420077606">「知乎」深入解析：单片机晶振脚原理是什么？</a></li><li><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/530018592">「知乎」皮尔斯振荡器电路工作原理图解，几分钟，立马搞定皮尔斯震荡电路</a></li><li><a href="">「CSDN」</a></li></ol></blockquote><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建简易ollama服务的PHP聊天页面</title>
      <link href="/2025/02/07/110203/"/>
      <url>/2025/02/07/110203/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="first_down"><p><!-- line left -->搜了一圈 github 没有发现基于 PHP 链接 ollama 的项目，大多用 webui （基于docker）或者浏览器插件搞定，于是任务抛给 deepseek，写了个基础页面出来。前面是安装教程后面是代码，我服务器是 php8.2 + brew httpd server。</p></div><h2 id="安装-ollama"><a class="markdownIt-Anchor" href="#安装-ollama"></a> 安装 ollama</h2><p><a target="_blank" rel="noopener" href="https://ollama.com/download">🔗ollama 下载</a></p><p>双击安装</p><h2 id="下载模型"><a class="markdownIt-Anchor" href="#下载模型"></a> 下载模型</h2><p>macos 下只需shell 输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run deepseek-r1:8b</span><br></pre></td></tr></table></figure><p>就会自动下载模型，速度慢下来了可以用<code>Ctrl</code>+<code>C</code>中断然后重新 run 一次。</p><h2 id="增加httpd-timeout-时间"><a class="markdownIt-Anchor" href="#增加httpd-timeout-时间"></a> 增加httpd timeout 时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/etc/httpd/extra/httpd-default.conf</span><br></pre></td></tr></table></figure><p>找到超时设置Timeout 15，时长增加到600</p><h2 id="php-code"><a class="markdownIt-Anchor" href="#php-code"></a> PHP code</h2><p>那么压力给到本地deepseek，输出代码经过修正如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 处理AI对话请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$userMessage</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ollama API配置</span></span><br><span class="line">    <span class="variable">$ollamaUrl</span> = <span class="string">&#x27;http://localhost:11434/api/generate&#x27;</span>;</span><br><span class="line">    <span class="variable">$requestData</span> = [</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span> =&gt; <span class="string">&#x27;deepseek-r1:1.5b&#x27;</span>,</span><br><span class="line">        <span class="comment">// &#x27;model&#x27; =&gt; &#x27;deepseek-r1:8b&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;prompt&#x27;</span> =&gt; <span class="variable">$userMessage</span>,</span><br><span class="line">        <span class="string">&#x27;stream&#x27;</span> =&gt; <span class="literal">false</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发起API请求</span></span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$ollamaUrl</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$requestData</span>));</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, [<span class="string">&#x27;Content-Type: application/json&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接超时时间为 10 分钟（600 秒）</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_CONNECTTIMEOUT, <span class="number">600</span>);</span><br><span class="line">    <span class="comment">// 设置执行超时时间为 10 分钟（600 秒）</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_TIMEOUT, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">    <span class="variable">$curlError</span> = <span class="title function_ invoke__">curl_error</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$httpCode</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;API请求失败: HTTP <span class="subst">$httpCode</span>, Curl错误信息: <span class="subst">$curlError</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&quot;API请求失败: HTTP <span class="subst">$httpCode</span>, Curl错误信息: <span class="subst">$curlError</span>&quot;</span>]);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$responseData</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$response</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$responseText</span> = <span class="variable">$responseData</span>[<span class="string">&#x27;response&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 处理 &lt;think&gt;&lt;/think&gt; 部分，用折叠框包裹</span></span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/&lt;think&gt;(.*?)&lt;\/think&gt;/is&#x27;</span>;</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="string">&#x27;&lt;details&gt;&lt;summary&gt;思考过程&lt;/summary&gt;$1&lt;/details&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$responseText</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$responseText</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;response&#x27;</span> =&gt; <span class="variable">$responseText</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Ollama聊天界面&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&amp;display=swap&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: <span class="string">&#x27;Roboto&#x27;</span>, Arial, sans-serif;</span><br><span class="line">            max-width: <span class="number">800</span>px;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">            background-color: <span class="comment">#F9F9F9;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .chat-container &#123;</span><br><span class="line">            background-color: white;</span><br><span class="line">            border-radius: <span class="number">8</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">3</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>), <span class="number">0</span> <span class="number">1</span>px <span class="number">2</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.24</span>);</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .chat-history &#123;</span><br><span class="line">            height: <span class="number">400</span>px;</span><br><span class="line">            overflow-y: auto;</span><br><span class="line">            border: <span class="number">1</span>px solid <span class="comment">#E0E0E0;</span></span><br><span class="line">            border-radius: <span class="number">4</span>px;</span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            margin-bottom: <span class="number">20</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .message &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: flex-start;</span><br><span class="line">            margin-bottom: <span class="number">15</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .avatar &#123;</span><br><span class="line">            width: <span class="number">40</span>px;</span><br><span class="line">            height: <span class="number">40</span>px;</span><br><span class="line">            border-radius: <span class="number">50</span>%;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            margin-right: <span class="number">10</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .user-avatar &#123;</span><br><span class="line">            background-image: <span class="title function_ invoke__">url</span>(<span class="string">&#x27;user_avatar.png&#x27;</span>);</span><br><span class="line">            <span class="comment">/* 替换为用户头像的实际路径 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ai-avatar &#123;</span><br><span class="line">            background-image: <span class="title function_ invoke__">url</span>(<span class="string">&#x27;ai_avatar.ico&#x27;</span>);</span><br><span class="line">            <span class="comment">/* 替换为AI头像的实际路径 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .message-content &#123;</span><br><span class="line">            margin: inherit;</span><br><span class="line">            padding: <span class="number">1</span>px <span class="number">30</span>px;</span><br><span class="line">            border-radius: <span class="number">18</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">2</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">            max-width: <span class="number">80</span>%;</span><br><span class="line">            <span class="comment">/* 把这个值调大以增加聊天框宽度 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        .user-message .message-content &#123;</span><br><span class="line">            background-color: <span class="comment">#E3F2FD;</span></span><br><span class="line">            color: <span class="comment">#333;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ai-message .message-content &#123;</span><br><span class="line">            background-color: <span class="comment">#F5F5F5;</span></span><br><span class="line">            color: <span class="comment">#333;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .input-container &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            gap: <span class="number">10</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input[type=<span class="string">&quot;text&quot;</span>] &#123;</span><br><span class="line">            flex: <span class="number">1</span>;</span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid <span class="comment">#E0E0E0;</span></span><br><span class="line">            border-radius: <span class="number">4</span>px;</span><br><span class="line">            font-size: <span class="number">16</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button &#123;</span><br><span class="line">            padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">            background-color: <span class="comment">#4285F4;</span></span><br><span class="line">            color: white;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: <span class="number">4</span>px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            font-size: <span class="number">16</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: <span class="comment">#357AE8;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .think &#123;</span><br><span class="line">            margin-top: <span class="number">14</span>px;</span><br><span class="line">            background: <span class="title function_ invoke__">rgba</span>(<span class="number">187</span>, <span class="number">85</span>, <span class="number">21</span>, <span class="number">0.2</span>);</span><br><span class="line">            <span class="comment">/* 使用 rgba 确保透明度可调整 */</span></span><br><span class="line">            border-radius: <span class="number">8</span>px;</span><br><span class="line">            <span class="comment">/* 添加圆角 */</span></span><br><span class="line">            padding: <span class="number">12</span>px;</span><br><span class="line">            <span class="comment">/* 添加内边距，让内容与边框有一定间隔 */</span></span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">1</span>px <span class="number">3</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>), <span class="number">0</span> <span class="number">1</span>px <span class="number">2</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.24</span>);</span><br><span class="line">            <span class="comment">/* 添加轻微阴影 */</span></span><br><span class="line">            transition: all <span class="number">0.3</span>s cubic-<span class="title function_ invoke__">bezier</span>(<span class="number">.25</span>,<span class="number">.8</span>,<span class="number">.25</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">/* 添加过渡效果，使交互更平滑 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .think:hover &#123;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">3</span>px <span class="number">6</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.16</span>), <span class="number">0</span> <span class="number">3</span>px <span class="number">6</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.23</span>);</span><br><span class="line">            <span class="comment">/* 鼠标悬停时增加阴影深度 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;!-- 引入 marked.js 库 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/marked/0.8.1/marked.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">chat</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">chat</span>-<span class="title">history</span>&quot; <span class="title">id</span>=&quot;<span class="title">chatHistory</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;!-- 聊天记录将在这里显示 --&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">input</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">id</span>=&quot;<span class="title">userInput</span>&quot; <span class="title">placeholder</span>=&quot;输入你的消息...&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">button</span> <span class="title">onclick</span>=&quot;<span class="title">sendMessage</span>()&quot;&gt;发送&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">        // 添加消息到聊天历史</span></span><br><span class="line"><span class="class">        <span class="title">function</span> <span class="title">addMessage</span>(<span class="title">message</span>, <span class="title">isUser</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">chatHistory</span> = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;chatHistory&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">messageDiv</span> = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            messageDiv.className = `message $&#123;isUser ? <span class="string">&#x27;user-message&#x27;</span>: <span class="string">&#x27;ai-message&#x27;</span>&#125;`;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">avatarDiv</span> = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            avatarDiv.className = `avatar $&#123;isUser ? <span class="string">&#x27;user-avatar&#x27;</span>: <span class="string">&#x27;ai-avatar&#x27;</span>&#125;`;</span><br><span class="line">            messageDiv.<span class="title function_ invoke__">appendChild</span>(avatarDiv);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">contentDiv</span> = document.<span class="title function_ invoke__">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            contentDiv.className = <span class="string">&#x27;message-content&#x27;</span>;</span><br><span class="line">            <span class="comment">// 渲染 Markdown 文本</span></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">renderedMessage</span> = marked.<span class="title function_ invoke__">parse</span>(message);</span><br><span class="line">            contentDiv.innerHTML = renderedMessage;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为 details 元素添加 think 类</span></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">detailsElements</span> = contentDiv.<span class="title function_ invoke__">querySelectorAll</span>(<span class="string">&#x27;details&#x27;</span>);</span><br><span class="line">            detailsElements.<span class="title function_ invoke__">forEach</span>((details) =&gt; &#123;</span><br><span class="line">                details.classList.<span class="title function_ invoke__">add</span>(<span class="string">&#x27;think&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            messageDiv.<span class="title function_ invoke__">appendChild</span>(contentDiv);</span><br><span class="line"></span><br><span class="line">            chatHistory.<span class="title function_ invoke__">appendChild</span>(messageDiv);</span><br><span class="line">            chatHistory.scrollTop = chatHistory.scrollHeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理发送消息</span></span><br><span class="line">        async <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">userInput</span> = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;userInput&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">message</span> = userInput.value.<span class="title function_ invoke__">trim</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!message) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清空输入框</span></span><br><span class="line">            userInput.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 显示用户消息</span></span><br><span class="line">            <span class="title function_ invoke__">addMessage</span>(message, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 AbortController 用于超时控制</span></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">controller</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">signal</span> = controller.signal;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置 10 分钟（600000 毫秒）的超时时间</span></span><br><span class="line">            <span class="keyword">const</span> <span class="variable constant_">timeoutId</span> = <span class="title function_ invoke__">setTimeout</span>(() =&gt; &#123;</span><br><span class="line">                controller.<span class="title function_ invoke__">abort</span>();</span><br><span class="line">            &#125;, <span class="number">600000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="variable constant_">response</span> = await <span class="title function_ invoke__">fetch</span>(<span class="string">&#x27;index.php&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">body</span>: `message=$&#123;<span class="title function_ invoke__">encodeURIComponent</span>(message)&#125;`,</span><br><span class="line">                    signal</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 清除超时定时器</span></span><br><span class="line">                <span class="title function_ invoke__">clearTimeout</span>(timeoutId);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> <span class="variable constant_">data</span> = await response.<span class="title function_ invoke__">json</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (data.error) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">addMessage</span>(`错误: $&#123;data.error&#125;`, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_ invoke__">addMessage</span>(data.response, <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="keyword">if</span> (error.name === <span class="string">&#x27;AbortError&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">addMessage</span>(<span class="string">&#x27;请求超时，请稍后重试&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_ invoke__">addMessage</span>(`请求失败: $&#123;error.message&#125;`, <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 允许通过回车键发送消息</span></span><br><span class="line">        document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;userInput&#x27;</span>).<span class="title function_ invoke__">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, (e) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">sendMessage</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h3><p>代码还有些问题，有较多地方有待优化。<br />如果网络不好断联了就会提示失败，本地运行问题不大。</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/02/003.png" alt="PHP 页面效果（未优化）" /></p><!-- ## _还没写完.._ --><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我们的文字：漢字</title>
      <link href="/2025/01/30/225834/"/>
      <url>/2025/01/30/225834/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文字之起源"><a class="markdownIt-Anchor" href="#文字之起源"></a> 文字之起源</h2><p>最近开始搜起了文字起源，上网搜甲骨文（契文）的发现与破译。大多数说法是王懿荣（中国晚清官员、学者）买龙骨（一味药材）时发现骨上刻有字。甲骨文是一种象形文字，表意文字，每一个字有其意义。据研究甲骨文流行于商代，是汉字起源。我们汉字也同样是表意文字，象形文字，写在竹简上，我们当今使用的简体已经简化了太多，繁体更能体现汉字是象形文字。</p><p>表意文字系统，也就是象形文字很好理解，人们通过观察各种自然现象和事物，绘制成图形，成为文字，经过千年，甲骨文演变到现在我们日常所使用的汉字。</p><p>与之相对的就是表音文字系统，世界上大多数人都在使用的是表音文字，英语日语韩语法语都是表音，由音节组成，字母起源网上版本很多，大部分说是古希腊字母演变而来，但究其根源应该是从表意文字系统变化而来。通常会从表意文字系统中截取部分作为自己的文字，经过改写删除原意，用于表音。</p><blockquote><p>最简单易懂的就是日语平假名和片假名，平假名取自中文草书的部分文字，片假名则取自正楷的部分偏旁部首，日文中的汉字也是进过中文汉字改编而来。</p></blockquote><h2 id="中华的算数"><a class="markdownIt-Anchor" href="#中华的算数"></a> 中华的算数</h2><p>讲讲中国人数学好这件事，总是说中国人数学好，能口算心算，大多归功于中小学教育制度，其实并不完全是。十几年前，我还只有几岁的时候，见到过路边卖菜的农村老奶奶老爷爷，拿着秤砣和一杆秤，就能把账算清楚，他们也没有受过小学中学教育，仅仅只是经过口口相传，从父辈们口中学习到。</p><p>这样的口口相传就是文化传承，比如半斤对八两，会说话的孩子几乎都知道，很多很多这样的顺口溜都是这样一代一代流传下来的。半斤对八两这个就是 16 进制，個十百千萬，就是 10 进制，这些进制都在我们的语言文字中能够表现出来，数学好不仅仅是教育制度，也和文化传承以及我们的语言文字息息相关。</p><p>说说进制在语言中的表现，中文用用十进制数数是非常容易的，可能是当初在发明文字的时候已经有了十进制的思维，于是便在文字中有所体现。英文中数字的念法有所不同，从一到十二分别有自己的词，从十三开始才有规律可循；法语的数字更是多，了解法语的朋友应该知道，用法语数数是件非常头疼的事情。</p><h2 id="优势与劣势"><a class="markdownIt-Anchor" href="#优势与劣势"></a> 优势与劣势</h2><p>说回表音文字系统和表意文字系统，他们的优势在哪？</p><p>表音文字系统优势在于相对容易学，容易传播，主旨在沟通，韩语就很典型，听说韩语速成班一两个月就能让你学会说。缺点便是词量大，很臃肿。举个例子说每当一个专业领域诞生一个新事物，新发明的时候就要发明一个单词用于描述，但是新事物源源不断有限字母的组合也是有限的，单词就会非常的长，难以记忆，为了解决这个问题便有了缩写。但是缩写也有问题，不同行业可能存在相同缩写于是就有了隔行如隔山的说法，去到别的专业领域，完全不知道他在做什么，说什么。举个例子，学车的朋友都知道 ABS（防抱死系统缩写），学材料或者了解过 3D 打印的朋友应该也熟悉这个词，ABS（一种塑料）。</p><p>表意文字系统优势在于能传承，能长期记录，上下五千年汉字（繁体）每个字意思没有巨变。劣势在于体量大，学习困难，难以速成，尤其繁体，当代人认识繁体的人很少了。</p><p>正是因为繁体难学难记便有了现代的简体字，简体字早在国民时期就有了苗头，为了解决当时中国人普遍是文盲的现状，开始简化汉字，但无疾而终。也同样在民国时期有一部分人认为应当废除汉字，走全拼音的路，拼音就是表音，易学，一定程度上能解决当时文盲率高的问题。我们小学学习的拼音很容易上手，但是记忆字形、偏旁部首的时候就相对没那么容易了，这也是为什么拼音输入法的普及率比五笔普及率高的原因，只要上过小学就会拼音，而五笔字形需要对汉字字形、笔顺非常了解，并且需要花时间记忆和长时间的使用去熟练他，学习成本较高，没有多少人愿意学五笔。</p><h2 id="汉字的简化"><a class="markdownIt-Anchor" href="#汉字的简化"></a> 汉字的简化</h2><p>中国历史上第一次文字大统一是在秦朝，李斯受命统一文字，将繁多文字统一为小篆，后又逐渐演变成楷书，草书等等。</p><p>简化汉字类似于李斯做的文字变革，不同的是当下文字已经成熟，但是笔画相当复杂不易学，想要在短时间内降低文盲率，必须简化文字，让其简单易学，历史上简化汉字一共有两次，第一次简化是在1956年1月28日，国务院首次公布了《汉字简化方案》，简化原则有三：</p><blockquote><p>1、以述而不作之原则；（只根据目前已有的汉字进行简化，不重新创作新的汉字）<br />2、择社会上比较通行之简体字，最先采用；（社会上普遍流行和通用的简体字最先采用）<br />3、原字笔画甚简者，不再求简。（原来的汉字笔画简单不复杂的，不再简化）</p></blockquote><p>上述原则体现出，在简化汉字过程中不破坏表意功能，因此我们仍然能理解句子的原因。</p><p>第二次简化在1977年12月20日，《人民日报》上公布了《第二次汉字简化方案》。1986年6月，国务院批准了国家语言文字工作委员会《关于废止&lt;第二次汉字简化方案(草案)和纠正社会用字混乱现象的请示》，“二简字”被停止使用。停止的理由是：<strong>“对汉字的简化应持谨慎态度，使汉字形体在一个时期内保持相对稳定，以利于社会应用”</strong>。</p><p>第二次简化，极大程度的破坏了表意功能，导致了汉字的混乱。户籍系统中“萧”姓写作“肖”、“阎”姓写作“闫”等，已难更改。</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/02/001.png" alt="大家可以看一下这张粮票的字，你能看懂吗？" /></p><p>我们如今使用的简体字是将流行于民间的简体字（或称俗字、手头字）加以整理并法定为社会用字的规范。删除了异体字：偏旁易位（“融”—“螎”）；会意字的偏旁不同（“灾”—“災”）。1955年12月公布的文化部和文改会联合发布了《第一批异体字整理表》，根据从简从俗的原则规定了810个正体字，淘汰了1055个异体字。异体字为不规范字，除姓氏和某些特殊场合外，不再使用。</p><blockquote><p>根据国务院1964年2月4日关于简化字问题给中国文字改革委员会的批示:“同意你会在报告中提出的意见:《汉字简化方案》中所列的简化字，用作偏旁时，应同样简化:《汉字简化方案》的偏旁简化表中所列的偏旁，除了四个偏旁(讠、饣、纟、钅)外，其余偏旁独立成字时，也应同样简化。你会应将上述可以用作偏旁的简化字和可以独立成字的偏旁，分别作成字表，会同有关部门下达执行”<br />——《中华人民共和国教育部关于简化字的联合通知(1964年3月7日)》（<a target="_blank" rel="noopener" href="https://wenku.baidu.com/view/5996f403ccc789eb172ded630b1c59eef8c79a91.html?_wkts_=1738500160319&amp;needWelcomeRecommand=1&amp;unResetStore=1&amp;ILK=17385001-0453-8812-0752-040256495254">🔗来自百度文库</a>）</p></blockquote><div id="first_down"><p><!-- line left -->对于古埃及文字的一些思考：在搜索文字起源的时候接触到古希腊、古埃及的文字，才了解到古埃及文字属于表音文字系统，但为什么表音呢。先说汉字，汉字是象形文字，象形文字是通过观察自然现象和事物，绘制成图形，成为文字，该文字已经存在意义，能够进行表达与沟通。那为什么会属于表音文字系统呢？表音的意义是什么？</p></div><blockquote><p><strong>注：</strong><br /><strong>本人并非专业领域，本文只是个人的一点点思考，做参考即可。</strong></p></blockquote><blockquote><p>参考链接：</p><ol><li><a target="_blank" rel="noopener" href="https://news.qq.com/rain/a/20231119A04W6N00">🔗历经两次简化的汉字，为何在第二次叫停了？「腾讯网」</a></li></ol></blockquote><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑暗中的汽笛声</title>
      <link href="/2025/01/21/121756/"/>
      <url>/2025/01/21/121756/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="first_down"><p><!-- line left -->想不到，那已经是三四年前的事了。每当忆起学生时期，她总不会缺席，说不出的悲喜，心中泛着涟漪。</p></div><p>第一次注意到她是一杯果茶。我走得晚，回宿舍的路上，与她擦肩而过，本想搭讪但还是低下了头，默默走了过去。第二次的相遇还是老地方，不同的是我总算是开口说了句 “hi”，其实那天的对话我也记不清了，准确来说慌得不行，回到宿舍脑袋空空。</p><p>我们相处着，她说和我相处的时光很好，要不是她自己的原因，我们可能早就在一起了。我呆呆的跟着她走着，没有做回应，同样我的问题她也没有给准确的答复，后面的一天又一天，好像是拖着。直到毕业后和那位未曾谋面的网友见面，才猛然醒悟，不是她一直拖着，而是我止步不前了，好像她曾好几次，种种信号都在提示我向前走（也许并不是这样，但不重要了），我好像什么都在迟疑，难以表达，不会表达。</p><p>我们走过的路不算多，但每条路都记得，学校里算是走遍了，疫情也不好出门（虽然是可以出去的），去校外机会不多但也去过几次，也都记得清楚，蛮开心的，让我不再那么 e（能说是阴影吗，也不准确）。虽然我们没有走下去，但至少是快乐的，有那段回忆足矣。</p><p>有的刀疤很疼，临近毕业和班里的朋友们在宿舍聊天时又裂开了一次。是经历教会了我需要长满荆棘，危险来临时要学会自保，但两年后的某天我猛然发现，这身荆棘让我失去了你。</p><p>我希望你不会看到这封书信，我想忘了你，我曾以为你不是我最深的那一个，可偏偏是你，让我每当回忆，那个身影，挥之不去。我隔着那雾蒙蒙的玻璃，我转身走了，可不远处的人影，好像还是你，隔着我我穿不过去的屏障。</p><p>实话说，毕业两年状态慢慢回来了，第一次是认识了新同事，第二次是加入博客社区，我仍然时不时怀念大学带走的那些日子，你永远不会缺席。</p><p>若不是今天下班晚了些，赶着夜色，走回家的路，模糊的镜头拍不出想要的效果，一切都是那么的相似，我也不会回首往事。</p><p>今天的月十分明亮，月光透过列车的窗，我坐在车窗旁。月光告诉我，过去的风景让他过去吧，你永远不知道下一道风景是什么。我看着窗外，树影稀疏了，那银色的田野里，星星点点的，黄绿色的光，闪烁着。那夜，在黑暗中，我听见了火车的汽笛声，从遥远而来，又开往远方。</p><p>这张画（头图）我收藏了好久好久，一直挂在空间墙上。(插画师：Mimi N[SUN Project])，他的插花我都看过，每一张都十分喜欢。</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/headimg/headimg/tobelove.jpg" alt="tobelove" /></p><!-- ## _还没写完.._ --><div id="first_down"><p><!-- line left -->书写此文，我希望就此放下（心中的执念？），放下那些不论好的还是坏的回忆，至此，割舍去，愿隐匿于最深处，再被翻出时，寥寥带过可好。</p></div><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>片上SOC外围硬件设计参考指南</title>
      <link href="/2025/01/15/193849/"/>
      <url>/2025/01/15/193849/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="first_down"><p><!-- line left -->本文的初衷是希望能让非电学专业的人能看明白，就像24年更新的[🔗元器件之旅](/tags/元器件之旅/)一样（但是得懂一点高数）。</p></div><h2 id="总则"><a class="markdownIt-Anchor" href="#总则"></a> 总则</h2><p>硬件设计不仅仅是原理重要，layout 也非常重要，layout是讲硬件线路变成现实的一环，这其中的原理相当的多，高压、低压、SI、EMI各不相同。</p><p>本文简述片上SOC需要的硬件接口和电源部分以及功能接口，是概述，每一部分后面可以单独出一篇细讲原理，具体细致到某一种协议，某一种平台电源方案都需要具体情况具体分析，篇幅不想写太长了，后面会把所有谈到的部分逐一展开讲解，每种设备的硬件原理以及涉及到的通信协议时序逻辑。</p><blockquote><p>本文均参考自网友文章和CPU厂商参考设计文档。</p></blockquote><h2 id="最小系统设计建议"><a class="markdownIt-Anchor" href="#最小系统设计建议"></a> 最小系统设计建议</h2><h3 id="晶振"><a class="markdownIt-Anchor" href="#晶振"></a> 晶振</h3><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/001.png" alt="晶体连接方式及器件参数 " /></p><blockquote><p>电容C1102、C1103的值需要根据晶体的实际标称负载电容值选择，8pF为原厂选用晶体所对应容值，不为通用值。</p></blockquote><p>部分芯片会说明晶振工作的作用，比如RK3399提到：芯片在待机时，会将内部时钟源切换到外接的32.768KHz时钟，通过降低工作频率以降低系统功耗。</p><p>这里只举到了RK3399这种IC，对于大到intel和AMD，小到STM32等微控制器都是一样的逻辑。晶振是芯片的脉搏来源，是各种数电骚操作的根基。</p><blockquote><p>参考本站文章（挖个坑，稍后补）–&gt;<a href="/">晶体谐振器与负载电容及其计算方法</a></p></blockquote><h3 id="复位电路"><a class="markdownIt-Anchor" href="#复位电路"></a> 复位电路</h3><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/002.png" alt="复位线路 " /></p><p>复位也是很重要的操作，当IC跑飞可以通过复位让其重新启动。这个连C51都有，不多做介绍。（多提一句，这个电容C1100是用来消抖的，开关摁下瞬间并不是理想瞬间拉低，在某一瞬间是会产生抖动的，波形不稳定，这里利用电容电压瞬间不可变的特性实现消抖，想详细了解可以量测开关摁下时的波形或者百度。）</p><h3 id="debug"><a class="markdownIt-Anchor" href="#debug"></a> Debug</h3><h4 id="jtag"><a class="markdownIt-Anchor" href="#jtag"></a> JTAG</h4><p>协议举例：<a target="_blank" rel="noopener" href="https://www.intel.com/programmable/technical-pdfs/655055.pdf"> IEEE 1149.1 (JTAG) Boundary-Scan<br />Testing for MAX II Devices</a></p><p>JTAG信号引脚一共有4个或者5个（其中一个可选）。这些引脚仅用于测试目的，控制JTAG完成1149.1协议的操作。引脚信息如下：</p><ul><li><p><strong>Test clock input（TCK）</strong>：该引脚为测试逻辑提供时钟，由于受板级以及芯片pad限制，一般频率为10MHz，频率占空比一般为50%。TMS和TDI的数据在TCK的上升沿被采样。数据在时钟的下降沿输出到TDO。<strong>建议下拉</strong>。</p></li><li><p><strong>Test mode select input（TMS）</strong>：用于控制JTAG内部状态机跳转，切换到指定，该信号在TCK上升沿时被采样。TMS用来设置JTAG口处于某种特定的测试模式，用于控制TAP状态机。<strong>必须上拉。</strong></p></li><li><p><strong>Test data input（TDI）</strong>：输入到指令寄存器（IR）或数据寄存器（DR）的数据出现在TDI输入端，在TCK的上升沿被采样。建议上拉，<strong>上拉电阻阻值不能小于1K</strong>。</p></li><li><p><strong>Test data output（TDO）</strong>：来自指令寄存器或数据寄存器的数据在时钟的下降沿被移出到TDO。<strong>不用上下拉</strong>，悬空时，尽量引出测试点，同时应避免将TDO作为I/O使用。</p></li><li><p><em><em>Test reset input（TRST</em>）</em>*：JTAG 内部逻辑全局异步复位信号，<strong>一般低电平有效</strong>。TRST可以用来对TAP Controller进行复位（初始化）。因为通过TMS也可以对TAPController进行复位（初始化）。所以有四线JTAG与五线JTAG之分。</p></li><li><p><strong>可选引脚RTCK</strong>：测试时钟返回信号。RTCK由目标端反馈给仿真器的时钟信号，用来同步TCK信号的产生，不使用时直接接地。</p></li><li><p><strong>可选引脚nSRST</strong>：目标系统复位信号。与目标板上的系统复位信号相连，可以直接对目标系统复位。同时可以检测目标系统的复位情况，为了防止误触发应在目标端加上适当的上拉电阻。</p></li></ul><h4 id="swd"><a class="markdownIt-Anchor" href="#swd"></a> SWD</h4><ul><li><p><strong>VRef</strong>：目标板参考电压信号。用于检查目标板是否供电，直接与目标板VDD联，并不向外输出电压(<strong>必须</strong>)</p></li><li><p><strong>GND</strong>：公共地信号(<strong>必须</strong>)</p></li><li><p><strong>SWDIO</strong>：串行数据输入输出，作为仿真信号的双向数据信号线，建议上拉(<strong>高速下载时一定需要上拉</strong>，<strong>必须</strong>)</p></li><li><p><strong>SWCLK</strong>：串行时钟输入，作为仿真信号的时钟信号线，建议下拉(<strong>高速下载时一定需要下拉</strong>，<strong>必须</strong>)</p></li><li><p><strong>SWO</strong>：串行数据输出引脚，CPU调试接口可通过SWO引脚输出一些调试信息。该引脚是<strong>可选的</strong></p></li><li><p><strong>RESET</strong>：仿真器输出至目标CPU的系统复位信号。该引脚<strong>可选</strong>，建议选择上，因为ULINK是一定需要该管脚的，使得仿真器能够在连接器件前对器件进行复位，以获得较理想的初始状态，便于后续连接仿真。</p></li></ul><h3 id="ddr电路"><a class="markdownIt-Anchor" href="#ddr电路"></a> DDR电路</h3><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/003.png" alt="RK3399DDR3拓扑 " /></p><p>对于内存来说，细节非常多，可以单独出一篇文章了，这里仅仅给出了RK3399DDR3拓扑，大概看下有哪些线需要链接上。每一代的DDR都有自己的标准DDR3和DDR4的标准就不太一样，具体情况具体分析。</p><p>DDR3上电时序如下：</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/004.png" alt="DDR3上电时序 " /></p><h3 id="emmc电路"><a class="markdownIt-Anchor" href="#emmc电路"></a> eMMC电路</h3><p>线路上一般直接连接就可以，没有上下拉电阻要求。当然，这类存储设备在进入休眠时会有掉电上电需求，具体情况看CPU的规格书，上面会详细说明如何开关电源。</p><ul><li><strong>eMMC_DQ[7:0]</strong>：eMMC数据发送/接收</li><li><strong>eMMC_CLK</strong>：eMMC时钟发送</li><li><strong>eMMC_CMD</strong>：eMMC命令发送/接收</li><li><strong>eMMC_STRB</strong>：HS400模式下，eMMC时钟接收软件配置内部下拉，无需外部下拉电阻。</li></ul><h3 id="spi"><a class="markdownIt-Anchor" href="#spi"></a> SPI</h3><p>为什么SPI也列入最小系统设计中？许多比较复杂的芯片如FPGA、CPU等等都有从SPI启动，比如BIOS就是SPI通信（严格来说不是标准SPI）。</p><ul><li><strong>SPI1_TXD（MOSI）</strong>：SPI数据发送</li><li><strong>SPI1_RXD（MISO）</strong>：SPI数据接收</li><li><strong>SPI1_CLK</strong>：SPI时钟发送，串联22ohm电阻 （这个电阻应该是阻抗匹配时用到的）</li><li><strong>SPI1_CSn0</strong>：SPI片选信号</li></ul><h2 id="电源系统设计简述"><a class="markdownIt-Anchor" href="#电源系统设计简述"></a> 电源系统设计简述</h2><p>电源方案在这里不好讲，因为每个芯片都不一样，先举个例子。</p><h3 id="x86"><a class="markdownIt-Anchor" href="#x86"></a> X86</h3><p>以前的 <strong>Intel CPU</strong> 电源方案采用的是 Controller+DrMOS ，具体如下图：</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/005.png" alt="经典Controller+DrMOS模型 " /></p><p>可以精准控制几路电源输出，CPU的电压很低但是电流非常大 80A+ 都是正常的（用功率计算公式反推一下就能知道，假设电压是0.9V），最新出的Lunar Lake的 DDR 部分已经和 CPU 绑定在一起了，时序自然也都有要求。</p><h3 id="arm"><a class="markdownIt-Anchor" href="#arm"></a> ARM</h3><p>而<strong>ARM</strong>架构如瑞芯微或者高通等，他们采用的电源方案不太一样，他们的电源分支非常细致，导致会有非常多的Buck和ldo，例如rk3399使用的RK809-3，有5路Buck和9路ldo。<s>大多是抄图的，真正做这些设计从理论到实践的都是原厂，OEM，ODM都是用着就行</s></p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/006.png" alt="RK809-3简介 " /></p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/007.jpg" alt="RK3399实际使用的电源数量 " /></p><h2 id="功能接口设计建议"><a class="markdownIt-Anchor" href="#功能接口设计建议"></a> 功能接口设计建议</h2><h3 id="存储卡电路"><a class="markdownIt-Anchor" href="#存储卡电路"></a> 存储卡电路</h3><p>其实就是TF卡，CPU 中叫做 SDMMC 控制器。硬件层面没什么好说的，把桥搭上，硬件层面就没有了。</p><ul><li><strong>SDMMC_DQ[3:0]</strong>：SDMMC数据发送/接收，上拉，串联22ohm电阻</li><li><strong>SDMMC_CLK</strong>：SDMMC时钟发送，下拉</li><li><strong>SDMMC_CMD</strong>：SDMMC命令发送/接收，上拉 ，串联22ohm电阻</li></ul><h3 id="以太网口电路"><a class="markdownIt-Anchor" href="#以太网口电路"></a> 以太网口电路</h3><p>RMII接口(MAC-to-PHY的RMII)：</p><ul><li><strong>MAC_TXCLK</strong>：数据发送的参考时钟【串联22ohm电阻】</li><li><strong>MAC_RXCLK</strong>：数据接收的参考时钟【直连】</li><li><strong>MAC_TXD[1:0]</strong>：数据发送 【串联22ohm电阻】</li><li><strong>MAC_RXD[1:0]</strong>：数据接收【直连】</li><li><strong>MAC_TXEN</strong>：发送数据使能 【串联22ohm电阻】</li><li><strong>MAC_RXDV</strong>：接收数据有效指示 【直连】</li><li><strong>MAC_MDC</strong>：配置接口时钟 【直连】</li><li><strong>MAC_MDIO</strong>：配置接口I/O 【直连】</li><li><strong>MAC_CLK</strong>：主时钟输出，50MHz 【串联22ohm电阻】</li></ul><p>这是以太网七层链路映射，对于硬件来说，主要是物理层，<strong>数据链路层</strong>主要是<strong>将</strong>不同的传输协议（UDP/TCP）加上其他的层如IP层等等形成的<strong>以太网数据包</strong>转换成<strong>电信号</strong>。</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/008.png" alt="太网七层链路 " /></p><p>对于RK3399来说，MAC部分已经集成到CPU中了，不像Intel，需要从PCIE转出来（映像中只有一个平台的有，其他的CPU都没有），设计相对简单些，当然也有MAC和PHY集成方案。</p><h3 id="usb电路"><a class="markdownIt-Anchor" href="#usb电路"></a> USB电路</h3><h4 id="usb-20"><a class="markdownIt-Anchor" href="#usb-20"></a> USB 2.0</h4><p>没什么好说的，非常简单。</p><ul><li>+5 VDC</li><li>Data -</li><li>Data +</li><li>Ground</li></ul><h4 id="usb-30"><a class="markdownIt-Anchor" href="#usb-30"></a> USB 3.0</h4><p>USB 3.0 相比 USB 2.0 多了一个差分信号，速度会快很多，属于高速信号（SI），越高速的信号layout要求越严格，例如TBT等等。</p><ul><li>针脚编号 1: 红色 - VBUS</li><li>针脚编号 2: 白色 - D−</li><li>针脚编号 3: 绿色 - D+</li><li>针脚编号 4: 黑色 - GND</li><li>针脚编号 5: 蓝色 - StdA_SSRX− / StdB_SSTX−</li><li>针脚编号 6: 黄色 - StdA_SSRX+ / StdB_SSTX+</li><li>针脚编号 7: Shield - 信号地用于降低噪声干扰</li><li>针脚编号 8: 紫色 - StdA_SSTX− / StdB_SSRX−</li><li>针脚编号 9: 橙色 - StdA_SSTX+ / StdB_SSRX+</li></ul><h3 id="音频电路"><a class="markdownIt-Anchor" href="#音频电路"></a> 音频电路</h3><p>最常见的是I2S，在I2C基础上做了一点点变更。还有PCM。</p><ul><li><strong>I2S_SCLK</strong>          下拉   串联22ohm电阻   I2S系统时钟输出，供I2S0&amp;I2S1设备工作</li><li><strong>I2S_SCLK</strong>          下拉   串联22ohm电阻   I2S位时钟输出</li><li><strong>I2S_LRCK_TX/RX</strong>    下拉   串联22ohm电阻   I2S声道选择输入/输出</li><li><strong>I2S_SDI0</strong>          下拉   串联22ohm电阻   I2S数据输入通道0</li><li><strong>I2S_SDI1SDO3</strong>      下拉   串联22ohm电阻   I2S数据输入通道1/输出通道3</li><li><strong>I2S_SDI2SDO2</strong>      下拉   串联22ohm电阻   I2S数据输入通道2/输出通道2</li><li><strong>I2S_SDI3SDO1</strong>      下拉   串联22ohm电阻   I2S数据输入通道3/输出通道1</li><li><strong>I2S_SDO0</strong>          下拉   串联22ohm电阻   I2S数据输出通道0</li></ul><p>Codec 在这里就暂时不讲了，方案很多，这里写不完。</p><h3 id="视频电路"><a class="markdownIt-Anchor" href="#视频电路"></a> 视频电路</h3><h4 id="edp"><a class="markdownIt-Anchor" href="#edp"></a> eDP</h4><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/010.png" alt="eDP " /></p><p>eDP控制器参考电阻R1704需选用1%精度的电阻，该电阻会影响眼图信号质量；</p><h4 id="mipi"><a class="markdownIt-Anchor" href="#mipi"></a> MIPI</h4><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/011.png" alt="mipi " /></p><p>MIPI-DSI控制器参考电阻R1707需选用1%精度的电阻，该电阻会影响眼图信号质量；</p><h4 id="hdmi"><a class="markdownIt-Anchor" href="#hdmi"></a> HDMI</h4><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/012.png" alt="HDMI " /></p><p>HDMI 需要注意防倒灌，在 CEC 的 DDC 上需要添加电瓶转换</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/013.png" alt="HDMI " /></p><h3 id="摄像头电路"><a class="markdownIt-Anchor" href="#摄像头电路"></a> 摄像头电路</h3><h4 id="mipi-csi"><a class="markdownIt-Anchor" href="#mipi-csi"></a> MIPI CSI</h4><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/014.png" alt="MIPI-CSI " /></p><p>控制器参考电阻R1602&amp;R1603请选用1%精度的电阻，该电阻会影响眼图信号质量；</p><h3 id="uart电路"><a class="markdownIt-Anchor" href="#uart电路"></a> UART电路</h3><ul><li><strong>UART_RX</strong>      ： UART数据输入</li><li><strong>UART_TX</strong>      ： UART数据输出</li><li><strong>UART_CTSn</strong>    ： UART允许发送信号</li><li><strong>UART_RTSn</strong>    ： UART请求发送信号</li></ul><h3 id="sdio电路"><a class="markdownIt-Anchor" href="#sdio电路"></a> SDIO电路</h3><ul><li><strong>SDIO_DQn[0:3]</strong>   ： 串联22ohm电阻  SDIO数据发送/接收</li><li><strong>SDIO_CLKOUT</strong>     ： 直连          SDIO时钟发送</li><li><strong>SDIO_CMD</strong>        ： 直连           SDIO命令发送/接收</li></ul><h3 id="spdif"><a class="markdownIt-Anchor" href="#spdif"></a> SPDIF</h3><p>SPDIF全称为Sony/Philips Digital Interface Format是SONY、PHILIPS数字音频接口的简称。就传输载体而言，SPDIF又分为同轴和光纤两种，其实他们可传输的信号是相同的，只不过是载体不同，接口和连线外观也有差异。但光信号传输无需考虑接口电平及阻抗问题，接口灵活且抗干扰能力更强。</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/015.png" alt="SPDIF使用同轴接口 " /></p><h3 id="pcie电路"><a class="markdownIt-Anchor" href="#pcie电路"></a> PCIe电路</h3><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/2025/01/016.png" alt="PCIE " /></p><p>TX信号线的耦合电容应靠近PCIe连接座放置，RX电容由设备端提供；</p><!-- ## _还没写完.._ --><div id="first_down"><p><!-- line left -->片上SOC设计有非常多细节，复杂的如FPGA和CPU，简单的就是嵌入式微控制器。在电子设计中，大多如此，至少在当前10~20年变化不大，具有科技感的AR、XR都是微型片上SOC。从外围电路设计上其实没有多少难度，核心是光机的光波导镜片以及核心SOC。乍眼一看其实硬件设计原理上基本到头了，除非材料革命。硬件创造世界，软件改变世界。现在这个时代四处充斥着软件的影子，你对手机的每一步操作，对 AI 讲的每一段语音都是软件在起作用，硬件只不过是载体而已。当然不排除芯片设计了，芯片设计是纯粹的硬件设计（可能也不准确，FPGA 之类的又有程序参与），从简单的触发器寄存器，通过复杂的级联成CPU，PC的诞生至今也不过四五十年左右。希望未来能来得更快点。</p></div><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将鼠标静音</title>
      <link href="/2025/01/01/004915/"/>
      <url>/2025/01/01/004915/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="first_down"><p><!-- line left -->记录新年2025第一天熬夜折腾鼠标，新年第一天熬夜。生命在于折腾，只是不经意间来到了 2025</p></div><p>鼠标不太灵敏了，打算拆开弄弄，发现是导光柱歪了，摆正之后不会再指针不会再飞了。一时兴起想拆开鼠标摁键看一看到底是哪里在响。</p><p>拆开长这样</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/previous/%E5%B0%86%E9%BC%A0%E6%A0%87%E9%9D%99%E9%9F%B3/1.png" alt="开关内部结构 " /></p><p>当你摁下时</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/previous/%E5%B0%86%E9%BC%A0%E6%A0%87%E9%9D%99%E9%9F%B3/2.png" alt="常态" /><br /><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/previous/%E5%B0%86%E9%BC%A0%E6%A0%87%E9%9D%99%E9%9F%B3/3.png" alt="闭合（摁下）" /></p><p>响的原因在于，金属片弧形部分有弹力，右侧力度达到能够促使金属片形变程度后，左侧会立即闭合，产生鼠标点击声音，想要消除只需把金属片反过来，例如：</p><p><img src="https://hub.gitmirror.com/raw.githubusercontent.com/HP-L/blog-main-site-images/refs/heads/main/article/previous/%E5%B0%86%E9%BC%A0%E6%A0%87%E9%9D%99%E9%9F%B3/5.png" alt="翻过来后就静音了 " /></p><p>这样声音减小了很多，但也带来了问题，手指触感没有之前那么好，软绵绵的，摁下去阻力非常小。</p><p>如果你想在深夜使用非静音鼠标，可以试试这个方法，但需要注意的是，有的鼠标用的并非是这种摁键，如果是方形无法拆卸的那种就不适用了。</p><!-- ## _还没写完.._ --><div id="first_down"><p><!-- line left -->从二四年最后一天晚上开始倒腾鼠标，修修补补，转眼间就 2025 年了，今年跨年没了曾经的感觉。</p></div><!-- Category：理论：理论知识技能，技术应用：应用笔记，实操折腾：折腾折腾折腾折腾！(其实属于应用，但就是玩！)方法：方法论（经验谈），如工程方法工具：针对具体工具的介绍、使用方法、分析适用场景等；使用工具如何如何解决具体问题，应该放在「应用」里作品：自己的作品（成品）、个人项目日志等杂谈：生活碎碎念自然科学：物理，化学，数学其他：没法分类的东西Tags细分领域：机器之脉络(硬件),机器之魂魄(嵌入式软件,机器学习，算法等),机器之骨骼(结构),形式：日志具体内容：个人作品、方法论、随笔语言：python C C# Java Html micropython 微信小程序IDE：Arduino CUBEIDE Vscode自然科学：代数 几何 概率 黑洞 白矮星 四维空间...IC OR IDE : STM32 ESP32 ESP8266 C51 树莓派 RK3399 野火开发版 MIQI模组：ws2812b系统：Linux Windows macOS openwrt Docker   termux游戏：MC博客：hexo 主题 魔改折腾系类：黑苹果，整服务器，termux -->]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
